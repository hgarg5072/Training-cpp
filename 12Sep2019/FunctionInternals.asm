; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	D:\Workspace\Training\Qualcomm\SepBatch2\12Sep2019\12Sep2019\FunctionInternals.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__D852B7E9_functioninternals@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?fun@@YAXHHHZZ					; fun
PUBLIC	_main
PUBLIC	__JustMyCode_Default
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_UninitUse:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\workspace\training\qualcomm\sepbatch2\12sep2019\12sep2019\functioninternals.cpp
;	COMDAT _main
_TEXT	SEGMENT
_b$ = -20						; size = 4
_a$ = -8						; size = 4
_main	PROC						; COMDAT

; 38   : int main() { // Caller

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D852B7E9_functioninternals@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 39   : 	int a = 10, b = 20;

	mov	DWORD PTR _a$[ebp], 10			; 0000000aH
	mov	DWORD PTR _b$[ebp], 20			; 00000014H

; 40   : // offset(locals): -(sum_sizes_locals(declared_before) + it's_size)
; 41   : // offset(a): -(0+4)
; 42   : // offset(b): -(4+4)
; 43   : 	/*
; 44   : 		sub esp, sizeof(int) // for a
; 45   : 		sub esp, sizeof(int) // for b
; 46   : 		or
; 47   : 		sub esp, sizeof(locals)
; 48   : 
; 49   : 	*/
; 50   : 
; 51   : 	a = a + b;

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 52   : 	/*
; 53   : 		mov Acc, [a] => [a] => ebp + offset(a)
; 54   : 		add Acc, [b] => [b] => ebp + offset(b)
; 55   : 		mov [a], Acc => [a] => ebp + offset(a)
; 56   : 	*/
; 57   : 	fun(a, b, 40);

	push	40					; 00000028H
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	?fun@@YAXHHHZZ				; fun
	add	esp, 12					; 0000000cH

; 58   : 	/*
; 59   : 		push [b]
; 60   : 		push [a]
; 61   : 		call fun
; 62   : 	*/
; 63   : }

	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\workspace\training\qualcomm\sepbatch2\12sep2019\12sep2019\functioninternals.cpp
;	COMDAT ?fun@@YAXHHHZZ
_TEXT	SEGMENT
$T1 = -233						; size = 1
$T2 = -221						; size = 1
_n$ = -20						; size = 4
_m$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?fun@@YAXHHHZZ PROC					; fun, COMDAT

; 15   : { /* Prologue

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T2[ebp], 0
	mov	BYTE PTR $T1[ebp], 0
	mov	ecx, OFFSET __D852B7E9_functioninternals@cpp
	call	@__CheckForDebuggerJustMyCode@4

; 16   : 	push ebp
; 17   : 	mov ebp, esp
; 18   : 	sub esp, sizeof(locals) // for m,n
; 19   :   */
; 20   : 	int m, n;
; 21   : 
; 22   : 	// use m,n,x,y
; 23   : 	x = m - n + y;

	cmp	BYTE PTR $T2[ebp], 0
	jne	SHORT $LN3@fun
	push	OFFSET $LN4@fun
	call	__RTC_UninitUse
	add	esp, 4
$LN3@fun:
	cmp	BYTE PTR $T1[ebp], 0
	jne	SHORT $LN5@fun
	push	OFFSET $LN6@fun
	call	__RTC_UninitUse
	add	esp, 4
$LN5@fun:
	mov	eax, DWORD PTR _m$[ebp]
	sub	eax, DWORD PTR _n$[ebp]
	add	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _x$[ebp], eax

; 24   : 	/*
; 25   : 		mov Acc, [m] => ebp + offset(m) =>  -4
; 26   : 		sub Acc, [n] => ebp + offset(n) =>  -8
; 27   : 		add Acc, [y] => ebp + offset(y) =>  +12
; 28   : 		mov [x], Acc => ebp + offset(x) => +8
; 29   : 	*/
; 30   : } /*

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@fun:
$LN6@fun:
	DB	110					; 0000006eH
	DB	0
$LN4@fun:
	DB	109					; 0000006dH
	DB	0
?fun@@YAXHHHZZ ENDP					; fun
_TEXT	ENDS
END
